// Generated by CoffeeScript 1.10.0
(function() {
  describe("semver-cmp", function() {
    var expect, semverCheck;
    expect = require("chai").expect;
    semverCheck = require("./semver-cmp");
    context("#split", function() {
      it("returns array with major, minor, patch version integers", function() {
        return expect(semverCheck.split("1.2.3")).to.deep.equal([1, 2, 3]);
      });
      it("sets patch to 0 by default", function() {
        expect(semverCheck.split("1.2")).to.deep.equal([1, 2, 0]);
        return expect(semverCheck.split("1.2.n")).to.deep.equal([1, 2, 0]);
      });
      it("sets minor to 0 by default", function() {
        expect(semverCheck.split("1")).to.deep.equal([1, 0, 0]);
        return expect(semverCheck.split("1.n")).to.deep.equal([1, 0, 0]);
      });
      it("passes extra versioning thru as string", function() {
        expect(semverCheck.split("1.2.3.4567")).to.deep.equal([1, 2, 3, "4567"]);
        return expect(semverCheck.split("1.2.3.4567.89")).to.deep.equal([1, 2, 3, "4567.89"]);
      });
      it("converts float or integer input to string", function() {
        expect(semverCheck.split(1.2)).to.deep.equal([1, 2, 0]);
        return expect(semverCheck.split(2)).to.deep.equal([2, 0, 0]);
      });
      return it("throws if input cannot be converted to string", function() {
        var ref, ref1, ref2, thrownError;
        thrownError = [TypeError, /must be string or number/];
        (ref = expect(function() {
          return semverCheck.split({
            v: "1.2.3"
          });
        }).to)["throw"].apply(ref, thrownError);
        (ref1 = expect(function() {
          return semverCheck.split([1, 2, 3]);
        }).to)["throw"].apply(ref1, thrownError);
        return (ref2 = expect(function() {
          return semverCheck.split(void 0);
        }).to)["throw"].apply(ref2, thrownError);
      });
    });
    context("#lt", function() {
      it("returns true when major is lower", function() {
        return expect(semverCheck.lt("1.2.3", "4.0.1")).to.be["true"];
      });
      it("returns true when minor is lower", function() {
        expect(semverCheck.lt("1.2.3", "1.4.0")).to.be["true"];
        return expect(semverCheck.lt("1.2.3", "1.10.1")).to.be["true"];
      });
      it("returns true when patch is lower", function() {
        expect(semverCheck.lt("1.2.3", "1.2.4")).to.be["true"];
        return expect(semverCheck.lt("1.2.3", "1.2.10")).to.be["true"];
      });
      it("returns false when major is higher", function() {
        return expect(semverCheck.lt("1.0.1", "0.2.3")).to.be["false"];
      });
      it("returns false when minor is higher", function() {
        expect(semverCheck.lt("1.4.1", "1.2.3")).to.be["false"];
        return expect(semverCheck.lt("1.10.1", "1.2.3")).to.be["false"];
      });
      it("returns false when patch is higher", function() {
        expect(semverCheck.lt("1.2.4", "1.2.3")).to.be["false"];
        return expect(semverCheck.lt("1.2.10", "1.2.3")).to.be["false"];
      });
      return it("returns false when major, minor and patch are same", function() {
        return expect(semverCheck.lt("1.2.3", "1.2.3")).to.be["false"];
      });
    });
    context("#gte", function() {
      it("returns false when patch is lower", function() {
        expect(semverCheck.gte("1.2.3", "1.2.4")).to.be["false"];
        return expect(semverCheck.gte("1.2.3", "1.2.10")).to.be["false"];
      });
      it("returns false when minor is lower", function() {
        expect(semverCheck.gte("1.2.3", "1.7.1")).to.be["false"];
        expect(semverCheck.gte("1.2.3", "1.11.1")).to.be["false"];
        return expect(semverCheck.gte("1.10.3", "1.11.1")).to.be["false"];
      });
      it("returns false when major is lower", function() {
        return expect(semverCheck.gte("1.2.3", "4.1.1")).to.be["false"];
      });
      it("returns true when patch is higher", function() {
        expect(semverCheck.gte("1.2.4", "1.2.3")).to.be["true"];
        return expect(semverCheck.gte("1.2.10", "1.2.3")).to.be["true"];
      });
      it("returns true when minor is higher", function() {
        expect(semverCheck.gte("1.4.1", "1.2.3")).to.be["true"];
        return expect(semverCheck.gte("1.10.1", "1.2.3")).to.be["true"];
      });
      it("returns true when major is higher", function() {
        return expect(semverCheck.gte("1.1.0", "0.2.3")).to.be["true"];
      });
      return it("returns true when major, minor and patch are same", function() {
        return expect(semverCheck.gte("1.2.3", "1.2.3")).to.be["true"];
      });
    });
    return context("#cmp", function() {
      it("returns integer 0 when version a equals b", function() {
        return expect(semverCheck.cmp("1.2.3", "1.2.3")).to.equal(0);
      });
      it("returns integer 1 when version a is higher than b", function() {
        expect(semverCheck.cmp("1.4.1", "1.2.3")).to.equal(1);
        return expect(semverCheck.cmp("1.10.1", "1.2.3")).to.equal(1);
      });
      return it("returns integer -1 when version a is lower than b", function() {
        expect(semverCheck.cmp("1.2.3", "1.7.1")).to.equal(-1);
        expect(semverCheck.cmp("1.2.3", "1.11.1")).to.equal(-1);
        return expect(semverCheck.cmp("1.10.3", "1.11.1")).to.equal(-1);
      });
    });
  });

}).call(this);
